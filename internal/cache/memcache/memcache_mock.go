// Code generated by MockGen. DO NOT EDIT.
// Source: memcache.go

// Package memcache is a generated GoMock package.
package memcache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemcacher is a mock of Memcacher interface.
type MockMemcacher struct {
	ctrl     *gomock.Controller
	recorder *MockMemcacherMockRecorder
}

// MockMemcacherMockRecorder is the mock recorder for MockMemcacher.
type MockMemcacherMockRecorder struct {
	mock *MockMemcacher
}

// NewMockMemcacher creates a new mock instance.
func NewMockMemcacher(ctrl *gomock.Controller) *MockMemcacher {
	mock := &MockMemcacher{ctrl: ctrl}
	mock.recorder = &MockMemcacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemcacher) EXPECT() *MockMemcacherMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMemcacher) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemcacherMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemcacher)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockMemcacher) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemcacherMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemcacher)(nil).Get), key)
}

// Set mocks base method.
func (m *MockMemcacher) Set(key string, value []byte, expiration int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMemcacherMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemcacher)(nil).Set), key, value, expiration)
}
